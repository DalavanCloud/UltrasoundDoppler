
// DATE:     22-NOV-2013 13:11:00 
// TITLE:    
// MODULE:   fifo_24bit
// DESIGN:   fifo_24bit
// FILENAME: fifo24bit.v
// PROJECT:  
// VERSION:  1.0
//
// This file is generated by verilog template from schematic symbol.
// The logic can be added into the generated HDL file by user. 


`timescale 1 ns / 1 ns

module fifo24bit(D, E_FLAG, F_FLAG, Q, RD, RES, RET, WR);
// Inputs
	input [23:0] D;
	input RD;
	input RES;
	input RET;
	input WR;

// Outputs
	output E_FLAG;
	output F_FLAG;
	output [23:0] Q;
	
// Bidirs


// Inputs Data Types
	wire [23:0] D;
	wire WR, RD, RES, RET;

// Outputs Data Types 
	wire [23:0] Q;
	wire F_FLAG, E_FLAG;

// Internal Variables
	reg [23:0] FF_MEM[31:0];
	reg [4:0] RD_PTR=0;
	reg [4:0] WR_PTR=0;

// ### Code Start ###

 
assign
	F_FLAG = (WR_PTR == 31);

assign
	E_FLAG = (RD_PTR == WR_PTR);

assign
//	Q = (E_FLAG) ?  0 : FF_MEM[RD_PTR];
	Q = FF_MEM[RD_PTR];

always@(posedge RD or posedge RES or posedge RET)
	if (RES | RET)
		RD_PTR <= 0;
	else if (!E_FLAG)
//		Q <= FF_MEM[RD_PTR];
		RD_PTR <= RD_PTR + 1;

always@(posedge WR or posedge RES)
	if (RES)
		WR_PTR <= 0;
	else if (!F_FLAG) begin
		FF_MEM[WR_PTR] <= D;
		WR_PTR <= WR_PTR + 1;
	end


endmodule // ctrl_fifo
