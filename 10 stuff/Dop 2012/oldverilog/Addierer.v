/* Verilog netlist generated by SCUBA Diamond_2.2_Production (99) */
/* Module Version: 3.2 */
/* C:\lscc\diamond\2.2_x64\ispfpga\bin\nt64\scuba.exe -w -n Addierer -lang verilog -synth synplify -bus_exp 7 -bb -arch mj5g00 -type add -width 32 -signed -port overflow -pipeline 0 -e  */
/* Mon Jul 29 13:13:22 2013 */


`timescale 1 ns / 1 ps
module adder (DataA, DataB, Result, Overflow)/* synthesis NGD_DRC_MASK=1 */;
    input wire [31:0] DataA;
    input wire [31:0] DataB;
    output wire [31:0] Result;
    output wire Overflow;

    wire co0;
    wire co1;
    wire co2;
    wire co3;
    wire co4;
    wire co5;
    wire co6;
    wire co7;
    wire co8;
    wire co9;
    wire co10;
    wire co11;
    wire co12;
    wire co13;
    wire co15;
    wire co16;
    wire co14;

    XOR2 XOR2_t0 (.A(co15), .B(co16), .Z(Overflow));

    FADD2 addsub_0 (.A1(DataA[1]), .A0(DataA[0]), .B1(DataB[1]), .B0(DataB[0]), 
        .CI(1'b0), .COUT1(co0), .COUT0(), .S1(Result[1]), .S0(Result[0]));

    FADD2 addsub_1 (.A1(DataA[3]), .A0(DataA[2]), .B1(DataB[3]), .B0(DataB[2]), 
        .CI(co0), .COUT1(co1), .COUT0(), .S1(Result[3]), .S0(Result[2]));

    FADD2 addsub_2 (.A1(DataA[5]), .A0(DataA[4]), .B1(DataB[5]), .B0(DataB[4]), 
        .CI(co1), .COUT1(co2), .COUT0(), .S1(Result[5]), .S0(Result[4]));

    FADD2 addsub_3 (.A1(DataA[7]), .A0(DataA[6]), .B1(DataB[7]), .B0(DataB[6]), 
        .CI(co2), .COUT1(co3), .COUT0(), .S1(Result[7]), .S0(Result[6]));

    FADD2 addsub_4 (.A1(DataA[9]), .A0(DataA[8]), .B1(DataB[9]), .B0(DataB[8]), 
        .CI(co3), .COUT1(co4), .COUT0(), .S1(Result[9]), .S0(Result[8]));

    FADD2 addsub_5 (.A1(DataA[11]), .A0(DataA[10]), .B1(DataB[11]), .B0(DataB[10]), 
        .CI(co4), .COUT1(co5), .COUT0(), .S1(Result[11]), .S0(Result[10]));

    FADD2 addsub_6 (.A1(DataA[13]), .A0(DataA[12]), .B1(DataB[13]), .B0(DataB[12]), 
        .CI(co5), .COUT1(co6), .COUT0(), .S1(Result[13]), .S0(Result[12]));

    FADD2 addsub_7 (.A1(DataA[15]), .A0(DataA[14]), .B1(DataB[15]), .B0(DataB[14]), 
        .CI(co6), .COUT1(co7), .COUT0(), .S1(Result[15]), .S0(Result[14]));

    FADD2 addsub_8 (.A1(DataA[17]), .A0(DataA[16]), .B1(DataB[17]), .B0(DataB[16]), 
        .CI(co7), .COUT1(co8), .COUT0(), .S1(Result[17]), .S0(Result[16]));

    FADD2 addsub_9 (.A1(DataA[19]), .A0(DataA[18]), .B1(DataB[19]), .B0(DataB[18]), 
        .CI(co8), .COUT1(co9), .COUT0(), .S1(Result[19]), .S0(Result[18]));

    FADD2 addsub_10 (.A1(DataA[21]), .A0(DataA[20]), .B1(DataB[21]), .B0(DataB[20]), 
        .CI(co9), .COUT1(co10), .COUT0(), .S1(Result[21]), .S0(Result[20]));

    FADD2 addsub_11 (.A1(DataA[23]), .A0(DataA[22]), .B1(DataB[23]), .B0(DataB[22]), 
        .CI(co10), .COUT1(co11), .COUT0(), .S1(Result[23]), .S0(Result[22]));

    FADD2 addsub_12 (.A1(DataA[25]), .A0(DataA[24]), .B1(DataB[25]), .B0(DataB[24]), 
        .CI(co11), .COUT1(co12), .COUT0(), .S1(Result[25]), .S0(Result[24]));

    FADD2 addsub_13 (.A1(DataA[27]), .A0(DataA[26]), .B1(DataB[27]), .B0(DataB[26]), 
        .CI(co12), .COUT1(co13), .COUT0(), .S1(Result[27]), .S0(Result[26]));

    FADD2 addsub_14 (.A1(DataA[29]), .A0(DataA[28]), .B1(DataB[29]), .B0(DataB[28]), 
        .CI(co13), .COUT1(co14), .COUT0(), .S1(Result[29]), .S0(Result[28]));

    FADD2 addsub_15 (.A1(DataA[31]), .A0(DataA[30]), .B1(DataB[31]), .B0(DataB[30]), 
        .CI(co14), .COUT1(co16), .COUT0(co15), .S1(Result[31]), .S0(Result[30]));



    // exemplar begin
    // exemplar end

endmodule
